// <auto-generated />
using System;
using JobMagnet.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobMagnet.Infrastructure.Migrations
{
    [DbContext(typeof(JobMagnetDbContext))]
    [Migration("20250628200323_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Contact.ContactType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IconClass")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ContactTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0000012d-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bx-envelope",
                            Name = "Email"
                        },
                        new
                        {
                            Id = new Guid("0000012e-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bx-mobile",
                            Name = "Mobile Phone"
                        },
                        new
                        {
                            Id = new Guid("0000012f-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bx-phone",
                            Name = "Home Phone"
                        },
                        new
                        {
                            Id = new Guid("00000130-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bx-phone-call",
                            Name = "Work Phone"
                        },
                        new
                        {
                            Id = new Guid("00000131-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bx-globe",
                            Name = "Website"
                        },
                        new
                        {
                            Id = new Guid("00000132-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-linkedin",
                            Name = "LinkedIn"
                        },
                        new
                        {
                            Id = new Guid("00000133-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-github",
                            Name = "GitHub"
                        },
                        new
                        {
                            Id = new Guid("00000134-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-twitter",
                            Name = "Twitter"
                        },
                        new
                        {
                            Id = new Guid("00000135-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-facebook",
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = new Guid("00000136-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-instagram",
                            Name = "Instagram"
                        },
                        new
                        {
                            Id = new Guid("00000137-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-youtube",
                            Name = "YouTube"
                        },
                        new
                        {
                            Id = new Guid("00000138-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-whatsapp",
                            Name = "WhatsApp"
                        },
                        new
                        {
                            Id = new Guid("00000139-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-telegram",
                            Name = "Telegram"
                        },
                        new
                        {
                            Id = new Guid("0000013a-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-snapchat",
                            Name = "Snapchat"
                        },
                        new
                        {
                            Id = new Guid("0000013b-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-pinterest",
                            Name = "Pinterest"
                        },
                        new
                        {
                            Id = new Guid("0000013c-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-skype",
                            Name = "Skype"
                        },
                        new
                        {
                            Id = new Guid("0000013d-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-discord",
                            Name = "Discord"
                        },
                        new
                        {
                            Id = new Guid("0000013e-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-twitch",
                            Name = "Twitch"
                        },
                        new
                        {
                            Id = new Guid("0000013f-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-tiktok",
                            Name = "TikTok"
                        },
                        new
                        {
                            Id = new Guid("00000140-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-reddit",
                            Name = "Reddit"
                        },
                        new
                        {
                            Id = new Guid("00000141-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IconClass = "bx bxl-vimeo",
                            Name = "Vimeo"
                        });
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ContactTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HeadlineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("HeadlineId");

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Headline", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Qualification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CareerHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstitutionLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CareerHistoryId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.SkillSet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("SkillSets");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Testimonial", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.VanityUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileSlugUrl")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProfileSlugUrl")
                        .IsUnique();

                    b.ToTable("PublicProfileIdentifier");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CareerHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CareerHistoryId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Skills.Entities.SkillCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SkillCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("00000002-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Software Development"
                        });
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Skills.Entities.SkillType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SkillTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000065-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/html5",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = new Guid("00000066-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/css3",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = new Guid("00000067-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/javascript",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("00000068-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/dotnet",
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("00000069-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/typescript",
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = new Guid("0000006a-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/angular",
                            Name = "Angular"
                        },
                        new
                        {
                            Id = new Guid("0000006b-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/postgresql",
                            Name = "PostgreSQL"
                        },
                        new
                        {
                            Id = new Guid("0000006c-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/react",
                            Name = "React"
                        },
                        new
                        {
                            Id = new Guid("0000006d-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/bootstrap",
                            Name = "Bootstrap"
                        },
                        new
                        {
                            Id = new Guid("0000006e-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/vuedotjs",
                            Name = "Vue"
                        },
                        new
                        {
                            Id = new Guid("0000006f-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/git",
                            Name = "Git"
                        },
                        new
                        {
                            Id = new Guid("00000070-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/blazor",
                            Name = "Blazor"
                        },
                        new
                        {
                            Id = new Guid("00000071-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/rabbitmq",
                            Name = "RabbitMQ"
                        },
                        new
                        {
                            Id = new Guid("00000072-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/docker",
                            Name = "Docker"
                        });
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Skills.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<Guid>("SkillSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillSetId");

                    b.HasIndex("SkillTypeId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Contact.ContactType", b =>
                {
                    b.OwnsMany("JobMagnet.Domain.Aggregates.Contact.ContactTypeAlias", "Aliases", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Alias")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<Guid>("ContactTypeId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("ContactTypeId");

                            b1.ToTable("ContactAliases");

                            b1.WithOwner()
                                .HasForeignKey("ContactTypeId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("00000191-0000-0000-0000-000000000000"),
                                    Alias = "Correo Electrónico",
                                    ContactTypeId = new Guid("0000012d-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000192-0000-0000-0000-000000000000"),
                                    Alias = "E-mail",
                                    ContactTypeId = new Guid("0000012d-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000193-0000-0000-0000-000000000000"),
                                    Alias = "Phone",
                                    ContactTypeId = new Guid("0000012e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000194-0000-0000-0000-000000000000"),
                                    Alias = "Teléfonos",
                                    ContactTypeId = new Guid("0000012e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000195-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono Móvil",
                                    ContactTypeId = new Guid("0000012e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000196-0000-0000-0000-000000000000"),
                                    Alias = "Celular",
                                    ContactTypeId = new Guid("0000012e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000197-0000-0000-0000-000000000000"),
                                    Alias = "Móvil",
                                    ContactTypeId = new Guid("0000012e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000198-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono Fijo",
                                    ContactTypeId = new Guid("0000012f-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000199-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono de Casa",
                                    ContactTypeId = new Guid("0000012f-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019a-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono Casa",
                                    ContactTypeId = new Guid("0000012f-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019b-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono Trabajo",
                                    ContactTypeId = new Guid("00000130-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019c-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono Oficina",
                                    ContactTypeId = new Guid("00000130-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019d-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono de Trabajo",
                                    ContactTypeId = new Guid("00000130-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019e-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono de Oficina",
                                    ContactTypeId = new Guid("00000130-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019f-0000-0000-0000-000000000000"),
                                    Alias = "Web Site",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a0-0000-0000-0000-000000000000"),
                                    Alias = "Web-site",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a1-0000-0000-0000-000000000000"),
                                    Alias = "Sitio Web",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a2-0000-0000-0000-000000000000"),
                                    Alias = "Página Web",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a3-0000-0000-0000-000000000000"),
                                    Alias = "Blog",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a4-0000-0000-0000-000000000000"),
                                    Alias = "Portafolio",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a5-0000-0000-0000-000000000000"),
                                    Alias = "X",
                                    ContactTypeId = new Guid("00000134-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a6-0000-0000-0000-000000000000"),
                                    Alias = "Wasap",
                                    ContactTypeId = new Guid("00000138-0000-0000-0000-000000000000")
                                });
                        });

                    b.Navigation("Aliases");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithOne("ProfessionalSummary")
                        .HasForeignKey("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.ContactInfo", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Contact.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Entities.Headline", null)
                        .WithMany("ContactInfo")
                        .HasForeignKey("HeadlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Headline", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithOne("Resume")
                        .HasForeignKey("JobMagnet.Domain.Aggregates.Profiles.Entities.Headline", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Project", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithMany("Projects")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Qualification", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", null)
                        .WithMany("Qualifications")
                        .HasForeignKey("CareerHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.SkillSet", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithOne("SkillSet")
                        .HasForeignKey("JobMagnet.Domain.Aggregates.Profiles.Entities.SkillSet", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Testimonial", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithMany("Testimonials")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.VanityUrl", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithMany("VanityUrls")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.WorkExperience", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", null)
                        .WithMany("WorkExperiences")
                        .HasForeignKey("CareerHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("JobMagnet.Domain.Aggregates.Profiles.ValueObjects.WorkHighlight", "Highlights", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<Guid>("WorkExperienceId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("WorkExperienceId");

                            b1.ToTable("WorkResponsibilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkExperienceId");
                        });

                    b.Navigation("Highlights");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Profile", b =>
                {
                    b.OwnsMany("JobMagnet.Domain.Aggregates.Profiles.Entities.Talent", "Talents", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("ProfileId");

                            b1.ToTable("Talents");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("Talents");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Skills.Entities.SkillType", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Skills.Entities.SkillCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("JobMagnet.Domain.Aggregates.Skills.Entities.SkillTypeAlias", "Aliases", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Alias")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<Guid>("SkillTypeId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("SkillTypeId");

                            b1.ToTable("SkillTypeAliases");

                            b1.WithOwner()
                                .HasForeignKey("SkillTypeId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("000000c9-0000-0000-0000-000000000000"),
                                    Alias = "JS",
                                    SkillTypeId = new Guid("00000067-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000ca-0000-0000-0000-000000000000"),
                                    Alias = "TS",
                                    SkillTypeId = new Guid("00000069-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000cb-0000-0000-0000-000000000000"),
                                    Alias = "Postgres",
                                    SkillTypeId = new Guid("0000006b-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000cc-0000-0000-0000-000000000000"),
                                    Alias = "Vue.js",
                                    SkillTypeId = new Guid("0000006e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000cd-0000-0000-0000-000000000000"),
                                    Alias = "Rabbit MQ",
                                    SkillTypeId = new Guid("00000071-0000-0000-0000-000000000000")
                                });
                        });

                    b.Navigation("Aliases");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Skills.Skill", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Entities.SkillSet", null)
                        .WithMany("Skills")
                        .HasForeignKey("SkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobMagnet.Domain.Aggregates.Skills.Entities.SkillType", "SkillType")
                        .WithMany()
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", b =>
                {
                    b.Navigation("Qualifications");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Headline", b =>
                {
                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.SkillSet", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Profile", b =>
                {
                    b.Navigation("ProfessionalSummary");

                    b.Navigation("Projects");

                    b.Navigation("Resume");

                    b.Navigation("SkillSet");

                    b.Navigation("Testimonials");

                    b.Navigation("VanityUrls");
                });
#pragma warning restore 612, 618
        }
    }
}
