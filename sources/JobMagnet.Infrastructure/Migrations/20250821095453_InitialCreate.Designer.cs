// <auto-generated />
using System;
using JobMagnet.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobMagnet.Infrastructure.Migrations
{
    [DbContext(typeof(JobMagnetDbContext))]
    [Migration("20250821095453_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Contact.ContactType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IconClass")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ContactTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0000012d-0000-0000-0000-000000000000"),
                            IconClass = "bx bx-envelope",
                            Name = "Email"
                        },
                        new
                        {
                            Id = new Guid("0000012e-0000-0000-0000-000000000000"),
                            IconClass = "bx bx-mobile",
                            Name = "Mobile Phone"
                        },
                        new
                        {
                            Id = new Guid("0000012f-0000-0000-0000-000000000000"),
                            IconClass = "bx bx-phone",
                            Name = "Home Phone"
                        },
                        new
                        {
                            Id = new Guid("00000130-0000-0000-0000-000000000000"),
                            IconClass = "bx bx-phone-call",
                            Name = "Work Phone"
                        },
                        new
                        {
                            Id = new Guid("00000131-0000-0000-0000-000000000000"),
                            IconClass = "bx bx-globe",
                            Name = "Website"
                        },
                        new
                        {
                            Id = new Guid("00000132-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-linkedin",
                            Name = "LinkedIn"
                        },
                        new
                        {
                            Id = new Guid("00000133-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-github",
                            Name = "GitHub"
                        },
                        new
                        {
                            Id = new Guid("00000134-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-twitter",
                            Name = "Twitter"
                        },
                        new
                        {
                            Id = new Guid("00000135-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-facebook",
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = new Guid("00000136-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-instagram",
                            Name = "Instagram"
                        },
                        new
                        {
                            Id = new Guid("00000137-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-youtube",
                            Name = "YouTube"
                        },
                        new
                        {
                            Id = new Guid("00000138-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-whatsapp",
                            Name = "WhatsApp"
                        },
                        new
                        {
                            Id = new Guid("00000139-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-telegram",
                            Name = "Telegram"
                        },
                        new
                        {
                            Id = new Guid("0000013a-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-snapchat",
                            Name = "Snapchat"
                        },
                        new
                        {
                            Id = new Guid("0000013b-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-pinterest",
                            Name = "Pinterest"
                        },
                        new
                        {
                            Id = new Guid("0000013c-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-skype",
                            Name = "Skype"
                        },
                        new
                        {
                            Id = new Guid("0000013d-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-discord",
                            Name = "Discord"
                        },
                        new
                        {
                            Id = new Guid("0000013e-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-twitch",
                            Name = "Twitch"
                        },
                        new
                        {
                            Id = new Guid("0000013f-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-tiktok",
                            Name = "TikTok"
                        },
                        new
                        {
                            Id = new Guid("00000140-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-reddit",
                            Name = "Reddit"
                        },
                        new
                        {
                            Id = new Guid("00000141-0000-0000-0000-000000000000"),
                            IconClass = "bx bxl-vimeo",
                            Name = "Vimeo"
                        });
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.AcademicDegree", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CareerHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstitutionLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CareerHistoryId");

                    b.ToTable("AcademicDegree");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("CareerHistory");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ContactTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProfileHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("ProfileHeaderId");

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.ProfileHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("ProfileHeaders");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("SkillSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillSetId");

                    b.HasIndex("SkillTypeId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.SkillSet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("SkillSets");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Talent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Talents");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Testimonial", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.VanityUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileSlugUrl")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProfileSlugUrl")
                        .IsUnique();

                    b.ToTable("VanityUrls");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CareerHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CareerHistoryId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.SkillTypes.Entities.SkillCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SkillCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("00000002-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Software Development"
                        },
                        new
                        {
                            Id = new Guid("00000003-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bases de Datos"
                        },
                        new
                        {
                            Id = new Guid("00000004-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cloud y DevOps"
                        },
                        new
                        {
                            Id = new Guid("00000005-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Arquitectura y Patrones"
                        },
                        new
                        {
                            Id = new Guid("00000006-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Testing"
                        },
                        new
                        {
                            Id = new Guid("00000007-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Data Science y ML"
                        },
                        new
                        {
                            Id = new Guid("00000008-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Metodologías y Gestión"
                        },
                        new
                        {
                            Id = new Guid("00000009-0000-0000-0000-000000000000"),
                            AddedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Habilidades Blandas"
                        });
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.SkillTypes.SkillType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SkillTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000065-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/html5",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = new Guid("00000066-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/css3",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = new Guid("00000067-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/javascript",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("00000068-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/csharp",
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("00000069-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/typescript",
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = new Guid("0000006a-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/angular",
                            Name = "Angular"
                        },
                        new
                        {
                            Id = new Guid("0000006b-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000003-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/postgresql",
                            Name = "PostgreSQL"
                        },
                        new
                        {
                            Id = new Guid("0000006c-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/react",
                            Name = "React"
                        },
                        new
                        {
                            Id = new Guid("0000006d-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/bootstrap",
                            Name = "Bootstrap"
                        },
                        new
                        {
                            Id = new Guid("0000006e-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/vuedotjs",
                            Name = "Vue"
                        },
                        new
                        {
                            Id = new Guid("0000006f-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/git",
                            Name = "Git"
                        },
                        new
                        {
                            Id = new Guid("00000070-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/blazor",
                            Name = "Blazor"
                        },
                        new
                        {
                            Id = new Guid("00000071-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/rabbitmq",
                            Name = "RabbitMQ"
                        },
                        new
                        {
                            Id = new Guid("00000072-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/docker",
                            Name = "Docker"
                        },
                        new
                        {
                            Id = new Guid("00000073-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/java",
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("00000074-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/python",
                            Name = "Python"
                        },
                        new
                        {
                            Id = new Guid("00000075-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/go",
                            Name = "Go"
                        },
                        new
                        {
                            Id = new Guid("00000076-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/rust",
                            Name = "Rust"
                        },
                        new
                        {
                            Id = new Guid("00000077-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/kotlin",
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = new Guid("00000078-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/swift",
                            Name = "Swift"
                        },
                        new
                        {
                            Id = new Guid("00000079-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/php",
                            Name = "PHP"
                        },
                        new
                        {
                            Id = new Guid("0000007a-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/ruby",
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = new Guid("0000007b-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/cplusplus",
                            Name = "C++"
                        },
                        new
                        {
                            Id = new Guid("0000007c-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000003-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/azuredatastudio",
                            Name = "SQL"
                        },
                        new
                        {
                            Id = new Guid("0000007d-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/dotnet",
                            Name = ".NET"
                        },
                        new
                        {
                            Id = new Guid("0000007e-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/dotnet",
                            Name = "ASP.NET Core"
                        },
                        new
                        {
                            Id = new Guid("0000007f-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/springboot",
                            Name = "Spring Boot"
                        },
                        new
                        {
                            Id = new Guid("00000080-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/django",
                            Name = "Django"
                        },
                        new
                        {
                            Id = new Guid("00000081-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/flask",
                            Name = "Flask"
                        },
                        new
                        {
                            Id = new Guid("00000082-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/nodedotjs",
                            Name = "Node.js"
                        },
                        new
                        {
                            Id = new Guid("00000083-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/express",
                            Name = "Express.js"
                        },
                        new
                        {
                            Id = new Guid("00000084-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/rubyonrails",
                            Name = "Ruby on Rails"
                        },
                        new
                        {
                            Id = new Guid("00000085-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/laravel",
                            Name = "Laravel"
                        },
                        new
                        {
                            Id = new Guid("00000086-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/dotnet",
                            Name = "Entity Framework Core"
                        },
                        new
                        {
                            Id = new Guid("00000087-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/svelte",
                            Name = "Svelte"
                        },
                        new
                        {
                            Id = new Guid("00000088-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/jquery",
                            Name = "jQuery"
                        },
                        new
                        {
                            Id = new Guid("00000089-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/sass",
                            Name = "Sass"
                        },
                        new
                        {
                            Id = new Guid("0000008a-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000002-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/tailwindcss",
                            Name = "Tailwind CSS"
                        },
                        new
                        {
                            Id = new Guid("0000008b-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000003-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/microsoftsqlserver",
                            Name = "SQL Server"
                        },
                        new
                        {
                            Id = new Guid("0000008c-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000003-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/mysql",
                            Name = "MySQL"
                        },
                        new
                        {
                            Id = new Guid("0000008d-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000003-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/oracle",
                            Name = "Oracle Database"
                        },
                        new
                        {
                            Id = new Guid("0000008e-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000003-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/mongodb",
                            Name = "MongoDB"
                        },
                        new
                        {
                            Id = new Guid("0000008f-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000003-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/redis",
                            Name = "Redis"
                        },
                        new
                        {
                            Id = new Guid("00000090-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000003-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/apachecassandra",
                            Name = "Cassandra"
                        },
                        new
                        {
                            Id = new Guid("00000091-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000003-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/sqlite",
                            Name = "SQLite"
                        },
                        new
                        {
                            Id = new Guid("00000092-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000003-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/azurecosmosdb",
                            Name = "Cosmos DB"
                        },
                        new
                        {
                            Id = new Guid("00000093-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000003-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/amazondynamodb",
                            Name = "DynamoDB"
                        },
                        new
                        {
                            Id = new Guid("00000094-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/microsoftazure",
                            Name = "Microsoft Azure"
                        },
                        new
                        {
                            Id = new Guid("00000095-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/amazonaws",
                            Name = "Amazon Web Services"
                        },
                        new
                        {
                            Id = new Guid("00000096-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/googlecloud",
                            Name = "Google Cloud Platform"
                        },
                        new
                        {
                            Id = new Guid("00000097-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/kubernetes",
                            Name = "Kubernetes"
                        },
                        new
                        {
                            Id = new Guid("00000098-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/terraform",
                            Name = "Terraform"
                        },
                        new
                        {
                            Id = new Guid("00000099-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/ansible",
                            Name = "Ansible"
                        },
                        new
                        {
                            Id = new Guid("0000009a-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/jenkins",
                            Name = "Jenkins"
                        },
                        new
                        {
                            Id = new Guid("0000009b-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/azuredevops",
                            Name = "Azure DevOps"
                        },
                        new
                        {
                            Id = new Guid("0000009c-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/githubactions",
                            Name = "GitHub Actions"
                        },
                        new
                        {
                            Id = new Guid("0000009d-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/gitlab",
                            Name = "GitLab CI"
                        },
                        new
                        {
                            Id = new Guid("0000009e-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/prometheus",
                            Name = "Prometheus"
                        },
                        new
                        {
                            Id = new Guid("0000009f-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000004-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/grafana",
                            Name = "Grafana"
                        },
                        new
                        {
                            Id = new Guid("000000a0-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000005-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Microservices Architecture"
                        },
                        new
                        {
                            Id = new Guid("000000a1-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000005-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Domain-Driven Design"
                        },
                        new
                        {
                            Id = new Guid("000000a2-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000005-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "SOLID Principles"
                        },
                        new
                        {
                            Id = new Guid("000000a3-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000005-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "REST APIs"
                        },
                        new
                        {
                            Id = new Guid("000000a4-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000005-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/graphql",
                            Name = "GraphQL"
                        },
                        new
                        {
                            Id = new Guid("000000a5-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000005-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Event-Driven Architecture"
                        },
                        new
                        {
                            Id = new Guid("000000a6-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000005-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "CQRS"
                        },
                        new
                        {
                            Id = new Guid("000000a7-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000005-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Design Patterns"
                        },
                        new
                        {
                            Id = new Guid("000000a8-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000006-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Unit Testing"
                        },
                        new
                        {
                            Id = new Guid("000000a9-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000006-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Integration Testing"
                        },
                        new
                        {
                            Id = new Guid("000000aa-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000006-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "End-to-End Testing"
                        },
                        new
                        {
                            Id = new Guid("000000ab-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000006-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/xunit",
                            Name = "xUnit"
                        },
                        new
                        {
                            Id = new Guid("000000ac-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000006-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/nunit",
                            Name = "NUnit"
                        },
                        new
                        {
                            Id = new Guid("000000ad-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000006-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/visualstudio",
                            Name = "MSTest"
                        },
                        new
                        {
                            Id = new Guid("000000ae-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000006-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/selenium",
                            Name = "Selenium"
                        },
                        new
                        {
                            Id = new Guid("000000af-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000006-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/cypress",
                            Name = "Cypress"
                        },
                        new
                        {
                            Id = new Guid("000000b0-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000006-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/playwright",
                            Name = "Playwright"
                        },
                        new
                        {
                            Id = new Guid("000000b1-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000006-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/jest",
                            Name = "Jest"
                        },
                        new
                        {
                            Id = new Guid("000000b2-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000007-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Machine Learning"
                        },
                        new
                        {
                            Id = new Guid("000000b3-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000007-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Data Analysis"
                        },
                        new
                        {
                            Id = new Guid("000000b4-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000007-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/pandas",
                            Name = "Pandas"
                        },
                        new
                        {
                            Id = new Guid("000000b5-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000007-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/numpy",
                            Name = "NumPy"
                        },
                        new
                        {
                            Id = new Guid("000000b6-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000007-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/tensorflow",
                            Name = "TensorFlow"
                        },
                        new
                        {
                            Id = new Guid("000000b7-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000007-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/pytorch",
                            Name = "PyTorch"
                        },
                        new
                        {
                            Id = new Guid("000000b8-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000007-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/scikitlearn",
                            Name = "Scikit-learn"
                        },
                        new
                        {
                            Id = new Guid("000000b9-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000007-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/powerbi",
                            Name = "Power BI"
                        },
                        new
                        {
                            Id = new Guid("000000ba-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000007-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/tableau",
                            Name = "Tableau"
                        },
                        new
                        {
                            Id = new Guid("000000bb-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000008-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Agile Methodologies"
                        },
                        new
                        {
                            Id = new Guid("000000bc-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000008-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/scrumalliance",
                            Name = "Scrum"
                        },
                        new
                        {
                            Id = new Guid("000000bd-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000008-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Kanban"
                        },
                        new
                        {
                            Id = new Guid("000000be-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000008-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/jira",
                            Name = "JIRA"
                        },
                        new
                        {
                            Id = new Guid("000000bf-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000008-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/confluence",
                            Name = "Confluence"
                        },
                        new
                        {
                            Id = new Guid("000000c0-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000008-0000-0000-0000-000000000000"),
                            IconUrl = "https://cdn.simpleicons.org/trello",
                            Name = "Trello"
                        },
                        new
                        {
                            Id = new Guid("000000c1-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000009-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Team Leadership"
                        },
                        new
                        {
                            Id = new Guid("000000c2-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000009-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Effective Communication"
                        },
                        new
                        {
                            Id = new Guid("000000c3-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000009-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Problem Solving"
                        },
                        new
                        {
                            Id = new Guid("000000c4-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000009-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Public Speaking"
                        },
                        new
                        {
                            Id = new Guid("000000c5-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000009-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Time Management"
                        },
                        new
                        {
                            Id = new Guid("000000c6-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000009-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Critical Thinking"
                        },
                        new
                        {
                            Id = new Guid("000000c7-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000009-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Mentoring"
                        },
                        new
                        {
                            Id = new Guid("000000c8-0000-0000-0000-000000000000"),
                            CategoryId = new Guid("00000009-0000-0000-0000-000000000000"),
                            IconUrl = "https://jobmagnet.com/default-icon.png",
                            Name = "Collaboration"
                        });
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ApplicationIdentityUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationIdentityUserId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("JobMagnet.Infrastructure.ExternalServices.Identity.Entities.ApplicationIdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Contact.ContactType", b =>
                {
                    b.OwnsMany("JobMagnet.Domain.Aggregates.Contact.ContactTypeAlias", "Aliases", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Alias")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<Guid>("ContactTypeId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("ContactTypeId");

                            b1.ToTable("ContactTypeAliases");

                            b1.WithOwner()
                                .HasForeignKey("ContactTypeId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("00000191-0000-0000-0000-000000000000"),
                                    Alias = "Correo Electrónico",
                                    ContactTypeId = new Guid("0000012d-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000192-0000-0000-0000-000000000000"),
                                    Alias = "E-mail",
                                    ContactTypeId = new Guid("0000012d-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000193-0000-0000-0000-000000000000"),
                                    Alias = "Phone",
                                    ContactTypeId = new Guid("0000012e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000194-0000-0000-0000-000000000000"),
                                    Alias = "Teléfonos",
                                    ContactTypeId = new Guid("0000012e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000195-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono Móvil",
                                    ContactTypeId = new Guid("0000012e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000196-0000-0000-0000-000000000000"),
                                    Alias = "Celular",
                                    ContactTypeId = new Guid("0000012e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000197-0000-0000-0000-000000000000"),
                                    Alias = "Móvil",
                                    ContactTypeId = new Guid("0000012e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000198-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono Fijo",
                                    ContactTypeId = new Guid("0000012f-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("00000199-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono de Casa",
                                    ContactTypeId = new Guid("0000012f-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019a-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono Casa",
                                    ContactTypeId = new Guid("0000012f-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019b-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono Trabajo",
                                    ContactTypeId = new Guid("00000130-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019c-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono Oficina",
                                    ContactTypeId = new Guid("00000130-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019d-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono de Trabajo",
                                    ContactTypeId = new Guid("00000130-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019e-0000-0000-0000-000000000000"),
                                    Alias = "Teléfono de Oficina",
                                    ContactTypeId = new Guid("00000130-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("0000019f-0000-0000-0000-000000000000"),
                                    Alias = "Web Site",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a0-0000-0000-0000-000000000000"),
                                    Alias = "Web-site",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a1-0000-0000-0000-000000000000"),
                                    Alias = "Sitio Web",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a2-0000-0000-0000-000000000000"),
                                    Alias = "Página Web",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a3-0000-0000-0000-000000000000"),
                                    Alias = "Blog",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a4-0000-0000-0000-000000000000"),
                                    Alias = "Portafolio",
                                    ContactTypeId = new Guid("00000131-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a5-0000-0000-0000-000000000000"),
                                    Alias = "X",
                                    ContactTypeId = new Guid("00000134-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000001a6-0000-0000-0000-000000000000"),
                                    Alias = "Wasap",
                                    ContactTypeId = new Guid("00000138-0000-0000-0000-000000000000")
                                });
                        });

                    b.Navigation("Aliases");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.AcademicDegree", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", null)
                        .WithMany("AcademicDegree")
                        .HasForeignKey("CareerHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithOne("CareerHistory")
                        .HasForeignKey("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.ContactInfo", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Contact.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Entities.ProfileHeader", null)
                        .WithMany("ContactInfo")
                        .HasForeignKey("ProfileHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.ProfileHeader", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithOne("Header")
                        .HasForeignKey("JobMagnet.Domain.Aggregates.Profiles.Entities.ProfileHeader", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Project", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithMany("Portfolio")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Skill", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Entities.SkillSet", null)
                        .WithMany("Skills")
                        .HasForeignKey("SkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobMagnet.Domain.Aggregates.SkillTypes.SkillType", "SkillType")
                        .WithMany()
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.SkillSet", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithOne("SkillSet")
                        .HasForeignKey("JobMagnet.Domain.Aggregates.Profiles.Entities.SkillSet", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Talent", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithMany("TalentShowcase")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.Testimonial", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithMany("Testimonials")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.VanityUrl", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Profile", null)
                        .WithMany("VanityUrls")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.WorkExperience", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", null)
                        .WithMany("WorkExperiences")
                        .HasForeignKey("CareerHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("JobMagnet.Domain.Aggregates.Profiles.ValueObjects.WorkHighlight", "Highlights", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<Guid>("WorkExperienceId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("WorkExperienceId");

                            b1.ToTable("WorkHighlight");

                            b1.WithOwner()
                                .HasForeignKey("WorkExperienceId");
                        });

                    b.Navigation("Highlights");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Profile", b =>
                {
                    b.OwnsOne("JobMagnet.Domain.Aggregates.Profiles.ValueObjects.BirthDate", "BirthDate", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly?>("Value")
                                .HasColumnType("date")
                                .HasColumnName("BirthDate");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("JobMagnet.Domain.Aggregates.Profiles.ValueObjects.PersonName", "Name", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("MiddleName");

                            b1.Property<string>("SecondLastName")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("SecondLastName");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("JobMagnet.Domain.Aggregates.Profiles.ValueObjects.ProfileImage", "ProfileImage", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Url")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProfileImage");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("BirthDate")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("ProfileImage")
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.SkillTypes.SkillType", b =>
                {
                    b.HasOne("JobMagnet.Domain.Aggregates.SkillTypes.Entities.SkillCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("JobMagnet.Domain.Aggregates.SkillTypes.ValueObjects.SkillTypeAlias", "Aliases", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Alias")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<Guid>("SkillTypeId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("SkillTypeId");

                            b1.ToTable("SkillTypeAliases");

                            b1.WithOwner()
                                .HasForeignKey("SkillTypeId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("000000ce-0000-0000-0000-000000000000"),
                                    Alias = "HTML5",
                                    SkillTypeId = new Guid("00000065-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000cf-0000-0000-0000-000000000000"),
                                    Alias = "CSS3",
                                    SkillTypeId = new Guid("00000066-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000c9-0000-0000-0000-000000000000"),
                                    Alias = "JS",
                                    SkillTypeId = new Guid("00000067-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000ca-0000-0000-0000-000000000000"),
                                    Alias = "TS",
                                    SkillTypeId = new Guid("00000069-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000cb-0000-0000-0000-000000000000"),
                                    Alias = "Postgres",
                                    SkillTypeId = new Guid("0000006b-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000cc-0000-0000-0000-000000000000"),
                                    Alias = "Vue.js",
                                    SkillTypeId = new Guid("0000006e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000cd-0000-0000-0000-000000000000"),
                                    Alias = "Rabbit MQ",
                                    SkillTypeId = new Guid("00000071-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000d0-0000-0000-0000-000000000000"),
                                    Alias = "ASP.NET",
                                    SkillTypeId = new Guid("0000007e-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000d1-0000-0000-0000-000000000000"),
                                    Alias = "Spring",
                                    SkillTypeId = new Guid("0000007f-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000d2-0000-0000-0000-000000000000"),
                                    Alias = "Node",
                                    SkillTypeId = new Guid("00000082-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000d3-0000-0000-0000-000000000000"),
                                    Alias = "Express",
                                    SkillTypeId = new Guid("00000083-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000d4-0000-0000-0000-000000000000"),
                                    Alias = "Rails",
                                    SkillTypeId = new Guid("00000084-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000d5-0000-0000-0000-000000000000"),
                                    Alias = "EF Core",
                                    SkillTypeId = new Guid("00000086-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000d6-0000-0000-0000-000000000000"),
                                    Alias = "SCSS",
                                    SkillTypeId = new Guid("00000089-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000d7-0000-0000-0000-000000000000"),
                                    Alias = "Oracle",
                                    SkillTypeId = new Guid("0000008d-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000d8-0000-0000-0000-000000000000"),
                                    Alias = "Azure",
                                    SkillTypeId = new Guid("00000094-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000d9-0000-0000-0000-000000000000"),
                                    Alias = "AWS",
                                    SkillTypeId = new Guid("00000095-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000da-0000-0000-0000-000000000000"),
                                    Alias = "GCP",
                                    SkillTypeId = new Guid("00000096-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000db-0000-0000-0000-000000000000"),
                                    Alias = "k8s",
                                    SkillTypeId = new Guid("00000097-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000dc-0000-0000-0000-000000000000"),
                                    Alias = "GitLab",
                                    SkillTypeId = new Guid("0000009d-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000dd-0000-0000-0000-000000000000"),
                                    Alias = "Microservicios",
                                    SkillTypeId = new Guid("000000a0-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000de-0000-0000-0000-000000000000"),
                                    Alias = "DDD",
                                    SkillTypeId = new Guid("000000a1-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000df-0000-0000-0000-000000000000"),
                                    Alias = "SOLID",
                                    SkillTypeId = new Guid("000000a2-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000e0-0000-0000-0000-000000000000"),
                                    Alias = "REST",
                                    SkillTypeId = new Guid("000000a3-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000e1-0000-0000-0000-000000000000"),
                                    Alias = "E2E Testing",
                                    SkillTypeId = new Guid("000000aa-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000e2-0000-0000-0000-000000000000"),
                                    Alias = "ML",
                                    SkillTypeId = new Guid("000000b2-0000-0000-0000-000000000000")
                                },
                                new
                                {
                                    Id = new Guid("000000e3-0000-0000-0000-000000000000"),
                                    Alias = "Agile",
                                    SkillTypeId = new Guid("000000bb-0000-0000-0000-000000000000")
                                });
                        });

                    b.Navigation("Aliases");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.User", b =>
                {
                    b.HasOne("JobMagnet.Infrastructure.ExternalServices.Identity.Entities.ApplicationIdentityUser", null)
                        .WithOne("User")
                        .HasForeignKey("JobMagnet.Domain.Aggregates.User", "ApplicationIdentityUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("JobMagnet.Infrastructure.ExternalServices.Identity.Entities.ApplicationIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("JobMagnet.Infrastructure.ExternalServices.Identity.Entities.ApplicationIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobMagnet.Infrastructure.ExternalServices.Identity.Entities.ApplicationIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("JobMagnet.Infrastructure.ExternalServices.Identity.Entities.ApplicationIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.CareerHistory", b =>
                {
                    b.Navigation("AcademicDegree");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.ProfileHeader", b =>
                {
                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Entities.SkillSet", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("JobMagnet.Domain.Aggregates.Profiles.Profile", b =>
                {
                    b.Navigation("CareerHistory");

                    b.Navigation("Header");

                    b.Navigation("Portfolio");

                    b.Navigation("SkillSet");

                    b.Navigation("TalentShowcase");

                    b.Navigation("Testimonials");

                    b.Navigation("VanityUrls");
                });

            modelBuilder.Entity("JobMagnet.Infrastructure.ExternalServices.Identity.Entities.ApplicationIdentityUser", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
