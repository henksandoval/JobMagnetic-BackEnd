jobs:
  - job: RunChecks
    displayName: 'Run Code Checks'
    steps:
      - checkout: self
        clean: true
        persistCredentials: true
        fetchDepth: 0
        displayName: Disable Shallow fetch

      - task: SonarCloudPrepare@3
        displayName: 'Prepare SonarCloud'
        inputs:
          SonarCloud: 'SonarCloud Service Connection Backend'
          organization: 'hsandoval'
          scannerMode: 'dotnet'
          projectKey: 'hsandoval_BackEnd'
          projectName: 'BackEnd'
          extraProperties: |
            sonar.exclusions=**/obj/**,**/*.dll,**/Migrations/*
            sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
            sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

      - task: UseDotNet@2
        displayName: 'Install .NET SDK'
        inputs:
          packageType: 'sdk'
          version: '9.x'

      - task: DotNetCoreCLI@2
        displayName: 'Restore dependencies'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
          feedsToUse: 'select'

      - task: DotNetCoreCLI@2
        displayName: 'Build project'
        inputs:
          command: 'build'
          projects: '**/*.csproj'

      - script: |
          docker --version
          docker info
        displayName: 'Check Docker installation'

      - task: DotNetCoreCLI@2
        displayName: 'Run Unit Tests'
        inputs:
          command: 'test'
          projects: '$(Build.SourcesDirectory)/JobMagnet.sln'
          arguments: '--no-build /p:CollectCoverage=true /p:CoverletOutput=$(Build.SourcesDirectory)/tests/coverage.opencover.xml /p:CoverletOutputFormat=opencover'
        env:
          OpenTelemetry__Enabled: 'false'
          Serilog__MinimumLevel__Default: 'Critical'

      - task: SonarCloudAnalyze@3
        inputs:
          jdkversion: 'JAVA_HOME_21_X64'
        displayName: 'Run SonarCloud Analyze'

      - task: SonarCloudPublish@3
        displayName: 'Publish Quality Gate Result'
        inputs:
          pollingTimeoutSec: '300'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '/home/vsts/work/_temp/*.trx'
          mergeTestResults: true
          testRunTitle: 'API Tests'

      - task: DotNetCoreCLI@2
        displayName: 'Publish project in ArtifactStagingDirectory'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: 'sources/**/*.csproj'
          arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: true

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifact from ArtifactStagingDirectory'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'ApiArtifact'
          publishLocation: 'pipeline'

      - task: PublishCodeCoverageResults@2
        displayName: 'Publish Code Coverage Report'
        inputs:
          summaryFileLocation: '$(Build.SourcesDirectory)/tests/coverage.opencover.xml'