name: CodeQuality
on:
  push:
    branches:
      - develop
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube packages and scanner
        uses: actions/cache@v4
        with:
          path: |
            ~/.sonar/cache
            ~/.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-sonar-scanner-

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Add SonarScanner to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'

      - name: Restore and build project
        run: dotnet build

      - name: Run Tests and Generate Coverage
        run: |
          dotnet test JobMagnet.sln --no-build /p:CollectCoverage=true /p:CoverletOutput=../coverage.opencover.xml /p:CoverletOutputFormat=opencover

      - name: SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"${{ vars.PROJECT_KEY }}" \
            /o:"${{ vars.ORGANIZATION }}" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="TestResults/**/coverage.opencover.xml" \
            /d:sonar.exclusions="**/Migrations/**" \
            /d:sonar.verbose=true

      - name: Build Project for SonarQube
        run: dotnet build --no-incremental

      - name: End SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"